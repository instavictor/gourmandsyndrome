{"version":3,"file":"365.gs.js","sources":["webpack://v4/./src/ts/stats/types/enums.ts","webpack://v4/./src/ts/stats/api/index.ts","webpack://v4/./src/ts/stats/hooks/index.ts","webpack://v4/./src/ts/stats/components/LocaleFilterButton.tsx","webpack://v4/./src/ts/stats/components/LocaleFilters.tsx","webpack://v4/./src/ts/stats/components/CuisineFilterButton.tsx","webpack://v4/./src/ts/stats/components/CuisineFilters.tsx","webpack://v4/./src/ts/stats/components/StatsTree.tsx","webpack://v4/./src/ts/stats/index.tsx"],"sourcesContent":["export enum Locales {\n    nyc = \"New York City\",\n    bos = \"Boston\",\n    anc = \"Anchorage\",\n    bra = \"Brazil\",\n    ca = \"Canada\",\n    chi = \"Chicago\",\n    dc = \"Washington DC\",\n    haw = \"Hawaii\",\n    las = \"Las Vegas\",\n    lax = \"Los Angeles\",\n    mco = \"Orlando\",\n    sea = \"Seattle\",\n}\n\nexport const Neighborhoods = {\n    lic: \"Long Island City\",\n\n    les: \"Lower East Side\",\n\n    ues: \"Upper East Side\",\n    uws: \"Upper West Side\",\n} as const;\n\nconst ReverseNeighborhoods = Object.fromEntries(Object.entries(Neighborhoods).map(([key, value]) => [value, key]));\n\nexport { ReverseNeighborhoods };\n","import { NormalizedData, ParseDataParams, Restaurant } from \"../types/api\";\nimport { Neighborhoods } from \"../types/enums\";\nimport { IRawData } from \"../types/IRawData\";\n\nconst normalizedData: NormalizedData = {\n    cuisineBreakdown: {},\n    restaurantBreakdown: {},\n    localeMap: {},\n    cuisineMap: {},\n    restaurantCount: {},\n};\n\n/**\n * This normalizes the raw data from the index.json file into a Normalized Data object to be reused for filtering results.\n *\n * @param data - this is the data from the external JSON call\n * @returns {NormalizedData} - the normalized data object to reuse for filtering\n */\nexport const normalizeData = (data: IRawData) => {\n    data.index?.forEach((item) => {\n        const localeKey = item.meta.locale;\n        const neighborhoodKeys = item.meta.neighborhoods;\n\n        if (!normalizedData.restaurantCount[localeKey]) {\n            normalizedData.restaurantCount[localeKey] = 1;\n        } else {\n            normalizedData.restaurantCount[localeKey]++;\n        }\n\n        // populate localeMap with defaults\n        // TODO: update filters to reflect correctly if something is saved later\n        normalizedData.localeMap[localeKey] = true;\n\n        //#region Restaurant Breakdown\n        const restaurantBreakdown = normalizedData.restaurantBreakdown;\n        const tempRestaurantObj = restaurantBreakdown[localeKey] || {};\n\n        // usually just 1\n        neighborhoodKeys.forEach((neighborhood) => {\n            const objToPush = {\n                name: item.title,\n                link: item.permalink,\n                cuisines: item.meta.cuisines,\n            };\n\n            const parsedNeighborhood = Neighborhoods[neighborhood.toLowerCase() as keyof typeof Neighborhoods] || neighborhood;\n\n            if (!tempRestaurantObj[parsedNeighborhood]) {\n                tempRestaurantObj[parsedNeighborhood] = [objToPush];\n            } else {\n                tempRestaurantObj[parsedNeighborhood].push(objToPush);\n            }\n        });\n\n        restaurantBreakdown[localeKey] = tempRestaurantObj;\n        //#endregion\n\n        //#region Cuisine Breakdown\n        item.meta.cuisines?.forEach((cuisineStr) => {\n            // set defaults for the filter\n            // TODO: update filters to reflect correctly for if something is saved later\n            normalizedData.cuisineMap[cuisineStr] = true;\n\n            const tempCuisineObj = normalizedData.cuisineBreakdown[cuisineStr] || {};\n            if (tempCuisineObj.totalCount) {\n                tempCuisineObj.totalCount = tempCuisineObj.totalCount + 1;\n            } else {\n                tempCuisineObj.totalCount = 1;\n            }\n\n            if (!tempCuisineObj.locales) tempCuisineObj.locales = {};\n\n            if (tempCuisineObj.locales[localeKey]) {\n                tempCuisineObj.locales[localeKey]++;\n            } else {\n                tempCuisineObj.locales[localeKey] = 1;\n            }\n\n            normalizedData.cuisineBreakdown[cuisineStr] = tempCuisineObj;\n        });\n        //#endregion\n    });\n\n    return normalizedData;\n};\n\nexport const parseData = (obj: ParseDataParams) => {\n    // DRAGONS TODO: clean this parsing up later\n    // Breakdown all cuisines with totals down to the locale\n    let results = normalizedData;\n\n    if (obj.localeFilters || obj.cuisineFilters) {\n        const normalizedDataClone: NormalizedData = JSON.parse(JSON.stringify(normalizedData));\n\n        const localeFilters = obj.localeFilters;\n        if (localeFilters) {\n            Object.keys(localeFilters).forEach((localeKey) => {\n                if (!localeFilters[localeKey]) {\n                    // loop through all NormalizedData.cuisineBreakdown / restaurantBreakdown\n                    const { cuisineBreakdown } = normalizedDataClone;\n\n                    Object.keys(cuisineBreakdown).forEach((cuisine) => {\n                        const { locales } = cuisineBreakdown[cuisine];\n                        if (locales?.[localeKey]) {\n                            delete locales[localeKey];\n\n                            if (Object.values(locales).length <= 0) {\n                                delete cuisineBreakdown[cuisine];\n                            }\n                        }\n                    });\n\n                    // delete the locale key that matches the restaurants\n                    delete normalizedDataClone.restaurantBreakdown[localeKey];\n                }\n            });\n\n            results = normalizedDataClone;\n        }\n\n        const cuisineFilters = obj.cuisineFilters;\n        if (cuisineFilters) {\n            // Looks at all the cuisine filters and removes any that are not selected\n\n            const isCuisinesSelected = Object.entries(cuisineFilters as Record<string, boolean>).filter(([, value]) => value === true).length > 0;\n\n            if (!isCuisinesSelected) {\n                // no cuisines selected, clear out all restaurannt data\n                normalizedDataClone.restaurantBreakdown = {};\n                normalizedDataClone.cuisineBreakdown = {};\n            } else {\n                Object.keys(cuisineFilters).forEach((cuisineKey) => {\n                    if (!cuisineFilters[cuisineKey]) {\n                        delete normalizedDataClone.cuisineBreakdown[cuisineKey];\n                    } else {\n                        // delete any cuisine filters unselected in the restaurant breakdown\n                        const { restaurantBreakdown } = normalizedDataClone;\n\n                        Object.keys(restaurantBreakdown).forEach((localeKey) => {\n                            const neighborhoodObj = restaurantBreakdown[localeKey];\n\n                            Object.keys(neighborhoodObj).forEach((neighborhoodKey) => {\n                                const restaurantsArray = neighborhoodObj[neighborhoodKey];\n                                const filteredRestaurants = restaurantsArray.filter((restaurant) => {\n                                    return restaurant.cuisines.includes(cuisineKey);\n                                });\n\n                                neighborhoodObj[neighborhoodKey] = filteredRestaurants as [Restaurant];\n                            });\n                        });\n                    }\n                });\n            }\n\n            results = normalizedDataClone;\n        }\n    }\n\n    return results;\n};\n\n/**\n * Prioritize NYC as the first filter to display\n *\n * @param a - the first key\n * @param b - the second key\n * @returns sorted array from Object.entries call\n */\nexport const compareFn = (a: [string, boolean], b: [string, boolean]) => {\n    if (a[0] === b[0]) return 0;\n    if (a[0] === \"nyc\") return -1;\n    if (b[0] === \"nyc\") return 1;\n\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n};\n\n/**\n * Prioritize NYC as the first filter to display\n *\n * @param a - the first key\n * @param b - the second key\n * @returns sorted array from Object.entries call\n */\nexport const compareFnKeys = (a0: string | Restaurant, b0: string | Restaurant) => {\n    let a, b;\n    if (typeof a === \"string\") {\n        //\n        a = a0;\n        b = b0;\n    } else {\n        a = (a0 as Restaurant).name;\n        b = (b0 as Restaurant).name;\n    }\n\n    if (a === b) return 0;\n    if (a === \"nyc\") return -1;\n    if (b === \"nyc\") return 1;\n\n    if (a < b) return -1;\n    if (a > b) return 1;\n    return 0;\n};\n","import { useContext } from \"react\";\nimport { StatsContext } from \"../stores/StatsProvider\";\n\nexport const useStatsContext = () => useContext(StatsContext);","import { useRef } from \"react\";\nimport { useStatsContext } from \"../hooks\";\nimport { Locales } from \"../types/enums\";\nimport { z } from \"zod\";\n\ninterface Props {\n    locale: [string, boolean];\n}\n\n/**\n * Locale Filter Button that shows up in the LocaleFilters component\n *\n * @param param0 - locale with locale string as first param, boolean as second param.  Boolean indicates if the locale was selected.\n * @returns\n */\nexport const LocaleFilterButton = ({ locale }: Props) => {\n    const ref = useRef(null);\n    const statsContext = useStatsContext();\n\n    const enabled = statsContext.localeFilters[locale[0]];\n\n    function handleClick() {\n        const button = ref.current as unknown as HTMLButtonElement;\n        if (button?.textContent) {\n            const dataLocale = button.getAttribute(\"data-locale\");\n\n            if (dataLocale) {\n                statsContext.updateLocaleFilters({\n                    [dataLocale]: !enabled,\n                });\n            }\n        }\n    }\n\n    // Zod Run-time checks to ensure locales match only the accepted\n    const localeLookup = locale[0] as keyof typeof Locales;\n    const LocaleEnum = z.nativeEnum(Locales);\n\n    const fullLocaleText = LocaleEnum.parse(Locales[localeLookup]) ? Locales[localeLookup] : \"\";\n\n    return (\n        <li>\n            <button ref={ref} data-locale={locale[0]} className={enabled ? \"active\" : \"\"} onClick={handleClick}>\n                {fullLocaleText}\n            </button>\n        </li>\n    );\n};\n","import { useStatsContext } from \"../hooks\";\nimport { LocaleFilterButton } from \"./LocaleFilterButton\";\nimport { compareFn } from \"../api\";\n\nconst LocaleFilters = () => {\n    const statsContext = useStatsContext();\n\n    const selectAll = () => {\n        const localeFilters = statsContext.localeFilters;\n\n        Object.keys(localeFilters).forEach((key) => {\n            localeFilters[key] = true;\n        });\n\n        statsContext.updateLocaleFilters(localeFilters);\n    };\n\n    const selectNone = () => {\n        const localeFilters = statsContext.localeFilters;\n\n        Object.keys(localeFilters).forEach((key) => {\n            localeFilters[key] = false;\n        });\n\n        statsContext.updateLocaleFilters(localeFilters);\n    };\n\n    const { localeFilters } = statsContext;\n    const localeFiltersItems = Object.entries(localeFilters)\n        .sort(compareFn)\n        .map((locale) => {\n            return <LocaleFilterButton key={locale[0]} locale={locale} />;\n        });\n\n    return (\n        <>\n            <h3>Locales</h3>\n            <span>Select: </span>\n            <button type=\"button\" onClick={selectAll}>\n                All\n            </button>\n            <button type=\"button\" onClick={selectNone}>\n                None\n            </button>\n            <ul className=\"buttons\">{localeFiltersItems}</ul>\n        </>\n    );\n};\n\nLocaleFilters.displayName = \"Locale Filters\";\n\nexport { LocaleFilters };\n","import { useRef } from \"react\";\nimport { useStatsContext } from \"../hooks\";\n\ninterface Props {\n    cuisine: [string, boolean];\n}\n\n/**\n * Cuisine Filter Button that shows up in the CuisineFilters component\n *\n * @param param0 - cuisine with cuisine string as first param, boolean as second param.  Boolean indicates if the cuisine was selected.\n * @returns\n */\nexport const CuisineFilterButton = ({ cuisine }: Props) => {\n    const ref = useRef(null);\n    const statsContext = useStatsContext();\n\n    const enabled = statsContext.cuisineFilters[cuisine[0]];\n\n    function handleClick() {\n        const button = ref.current as unknown as HTMLButtonElement;\n        if (button?.textContent) {\n            const dataCuisine = button.getAttribute(\"data-cuisine\");\n\n            if (dataCuisine) {\n                statsContext.updateCuisineFilters({\n                    [dataCuisine]: !enabled,\n                });\n            }\n        }\n    }\n\n    return (\n        <li key={cuisine[0]}>\n            <button ref={ref} data-cuisine={cuisine[0]} className={enabled ? \"active\" : \"\"} onClick={handleClick}>\n                {cuisine[0]}\n            </button>\n        </li>\n    );\n};\n","import { useStatsContext } from \"../hooks\";\nimport { CuisineFilterButton } from \"./CuisineFilterButton\";\nimport { compareFn } from \"../api\";\n\nconst CuisineFilters = () => {\n    const statsContext = useStatsContext();\n\n    const selectAll = () => {\n        const cuisineFilters = statsContext.cuisineFilters;\n\n        Object.keys(cuisineFilters).forEach((key) => {\n            cuisineFilters[key] = true;\n        });\n\n        statsContext.updateCuisineFilters(cuisineFilters);\n    };\n\n    const selectNone = () => {\n        const cuisineFilters = statsContext.cuisineFilters;\n\n        Object.keys(cuisineFilters).forEach((key) => {\n            cuisineFilters[key] = false;\n        });\n\n        statsContext.updateCuisineFilters(cuisineFilters);\n    };\n\n    const { cuisineFilters } = statsContext;\n    const cuisineFiltersItems = Object.entries(cuisineFilters)\n        .sort(compareFn)\n        .map((cuisine) => {\n            return <CuisineFilterButton key={cuisine[0]} cuisine={cuisine} />;\n        });\n\n    return (\n        <>\n            <h3>Cuisines</h3>\n            <span>Select: </span>\n            <button type=\"button\" onClick={selectAll}>\n                All\n            </button>\n            <button type=\"button\" onClick={selectNone}>\n                None\n            </button>\n            <ul className=\"buttons\">{cuisineFiltersItems}</ul>\n        </>\n    );\n};\n\nCuisineFilters.displayName = \"Cuisine Filters\";\n\nexport { CuisineFilters };\n","import { compareFnKeys } from \"../api\";\nimport { useStatsContext } from \"../hooks\";\nimport { CuisineBreakdownMeta } from \"../types/api\";\nimport { ReverseNeighborhoods } from \"../types/enums\";\n\nconst getCuisineLocalesTree = (cuisineKey: string, cuisine: CuisineBreakdownMeta) => {\n    const { locales = {} } = cuisine;\n\n    const localesTree = Object.keys(locales)\n        .sort(compareFnKeys)\n        .map((localeKey = \"\") => {\n            const hitsNumber = locales[localeKey];\n\n            const cuisine = cuisineKey.toLowerCase().replace(/ /g, \"-\");\n\n            if (hitsNumber) {\n                return (\n                    <li key={localeKey}>\n                        <a data-locale={localeKey} href={`/${localeKey}/cuisine/${cuisine}`}>\n                            {localeKey.toUpperCase()} ({hitsNumber})\n                        </a>\n                    </li>\n                );\n            }\n        });\n\n    return <ul>{localesTree}</ul>;\n};\n\nexport const StatsTree = () => {\n    const statsContext = useStatsContext();\n\n    const { data } = statsContext;\n\n    const cuisineMap = Object.keys(data.cuisineBreakdown)\n        .filter((data) => {\n            return statsContext.cuisineFilters[data];\n        })\n        .sort()\n        .map((cuisineKey) => {\n            const cuisine = data.cuisineBreakdown[cuisineKey];\n\n            return (\n                <li className=\"first-level\" data-cuisine={cuisineKey} key={cuisineKey}>\n                    <span>\n                        {cuisineKey} (Total: {cuisine.totalCount})\n                    </span>\n                    <div className=\"second-level\">{getCuisineLocalesTree(cuisineKey, cuisine)}</div>\n                </li>\n            );\n        });\n\n    const restaurantMap = Object.keys(data.restaurantBreakdown)\n        .filter((data) => {\n            return statsContext.localeFilters[data];\n        })\n        .map((restaurantLocale) => {\n            const restaurantNeighborhoods = data.restaurantBreakdown[restaurantLocale];\n\n            const localeLevel = Object.keys(restaurantNeighborhoods)\n                .sort()\n                .map((neighborhood) => {\n                    const count = restaurantNeighborhoods[neighborhood].length;\n\n                    if (count <= 0) {\n                        return null;\n                    }\n\n                    const restaurantsMap = restaurantNeighborhoods[neighborhood].sort(compareFnKeys).map((restaurant) => {\n                        return (\n                            <li className=\"third-level\" key={`${neighborhood}-${restaurant.name}`}>\n                                <a href={restaurant.link}>{restaurant.name}</a>\n                            </li>\n                        );\n                    });\n\n                    const shortStr = ReverseNeighborhoods[neighborhood];\n                    const neighborhoodStr = (shortStr || neighborhood).replace(/ /g, \"-\").replace(/'/g, \"\").toLowerCase();\n\n                    return (\n                        <li className=\"neighborhood-level\" key={`${restaurantLocale}-${neighborhoodStr}`}>\n                            <a href={`/${restaurantLocale}/neighborhood/${neighborhoodStr}`}>{neighborhood.toUpperCase()}</a> ({count})<ul>{restaurantsMap}</ul>\n                        </li>\n                    );\n                });\n\n            return (\n                <li className=\"first-level\" data-locale={restaurantLocale} key={restaurantLocale}>\n                    <a href={`/locale/${restaurantLocale}`}>{restaurantLocale.toUpperCase()}</a> (Total: {data.restaurantCount[restaurantLocale]})<ul>{localeLevel}</ul>\n                </li>\n            );\n        });\n\n    return (\n        <>\n            <section id=\"cuisine-breakdown\">\n                <div className=\"title\">Cuisine Breakdown</div>\n                <div className=\"synopsis\">\n                    <ul>{cuisineMap}</ul>\n                </div>\n            </section>\n\n            <section id=\"restaurant-breakdown\">\n                <div className=\"title\">Restaurant Breakdown</div>\n                <div className=\"synopsis\">\n                    <ul>{restaurantMap}</ul>\n                </div>\n            </section>\n        </>\n    );\n};\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport { StatsProvider } from \"./stores/StatsProvider\";\nimport { LocaleFilters } from \"./components/LocaleFilters\";\nimport { normalizeData } from \"./api\";\nimport { IRawData } from \"./types/IRawData\";\nimport { CuisineFilters } from \"./components/CuisineFilters\";\nimport { StatsTree } from \"./components/StatsTree\";\n\nasync function fetchData() {\n    const response = await fetch(\"/index.json\");\n    return response.json();\n}\n\nfetchData().then((response: IRawData) => {\n    // TODO: Setup IndexedDB or marshall data through different Contexts\n\n    const localeMap: Record<string, boolean> = {};\n    const cuisineMap: Record<string, boolean> = {};\n\n    response.index?.forEach((data) => {\n        const locale = data.meta.locale;\n        localeMap[locale] = true;\n\n        const cuisines = data.meta.cuisines;\n        cuisines.forEach((cuisine) => {\n            cuisineMap[cuisine] = true;\n        });\n    });\n\n    const query = document.querySelector(\"#content .stats\");\n\n    if (query) {\n        const root = createRoot(query);\n        root.render(\n            <StrictMode>\n                <StatsProvider response={normalizeData(response)}>\n                    <div className=\"filters\">\n                        <LocaleFilters />\n                        <CuisineFilters />\n                    </div>\n                    <div className=\"results\">\n                        <StatsTree />\n                    </div>\n                </StatsProvider>\n            </StrictMode>,\n        );\n    } else {\n        console.error(\"Could not render root because query selector failed\");\n    }\n});\n"],"names":["Locales","Neighborhoods","ReverseNeighborhoods","Object","key","value","normalizedData","normalizeData","data","_data_index","item","_item_meta_cuisines","localeKey","neighborhoodKeys","restaurantBreakdown","tempRestaurantObj","neighborhood","objToPush","parsedNeighborhood","cuisineStr","tempCuisineObj","parseData","obj","results","normalizedDataClone","JSON","localeFilters","useStatsContext","useContext","StatsContext","LocaleFilterButton","t0","t1","$","_c","locale","ref","useRef","statsContext","enabled","button","current","LocaleFilters","t2","t3","t4","keys","forEach","updateLocaleFilters","selectAll","localeFilters_0","key_0","selectNone","localeFilters_1","entries","sort","compareFn","map","_temp","localeFiltersItems","Symbol","for","CuisineFilterButton","cuisine","cuisineFilters","CuisineFilters","updateCuisineFilters","cuisineFilters_0","cuisineFilters_1","cuisineFiltersItems","getCuisineLocalesTree","cuisineKey","fetchData","fetch","response","json","then"],"mappings":"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"}